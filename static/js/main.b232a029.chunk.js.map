{"version":3,"sources":["SentinelInfiniteScroll/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["useSentinel","callback","observerOptions","useState","isFetching","setIsFetching","ref","useRef","useEffect","current","observer","IntersectionObserver","entry","isIntersecting","observe","disconnect","useInfiniteScroll","topOffset","topCallback","topObserverOptions","bottomOffset","bottomCallback","bottomObserverOptions","listRef","topSentinelRef","onScreen","a","originScrollHeight","scrollHeight","scrollTop","root","bottomSentinelRef","clientHeight","className","children","fetchMockData","mockData","Promise","resolve","reject","setTimeout","InfiniteScrollExample","list","setList","sentinelRef","then","data","rootMargin","stopLoading","length","style","height","width","overflow","map","item","idx","key","InfiniteScrollExample2","App","src","logo","alt","display","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b232a029.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react'\n\nexport const useSentinel = (callback, observerOptions) => {\n  const [isFetching, setIsFetching] = useState(false)\n  const ref = useRef()\n  useEffect(\n    () => {\n      const { current } = ref\n      const observer = new IntersectionObserver(([entry]) => {\n        callback && callback(entry.isIntersecting, isFetching, setIsFetching)\n      }, observerOptions)\n\n      if (current) {\n        observer.observe(current)\n      }\n      return () => {\n        observer.disconnect()\n      }\n    },\n    [callback, isFetching, observerOptions, ref]\n  )\n\n  return ref\n}\n\nexport const useInfiniteScroll = ({\n  topOffset,\n  topCallback,\n  topObserverOptions,\n  bottomOffset,\n  bottomCallback,\n  bottomObserverOptions\n}) => {\n  const listRef = useRef()\n\n  const topSentinelRef = useSentinel(\n    async (onScreen, isFetching, setIsFetching) => {\n      if (!isFetching && onScreen) {\n        setIsFetching(true)\n        const originScrollHeight = listRef.current.scrollHeight\n        if (topCallback) {\n          await topCallback(listRef, topSentinelRef, setIsFetching)\n          listRef.current.scrollTop =\n            listRef.current.scrollTop +\n            listRef.current.scrollHeight -\n            originScrollHeight\n        }\n        return setIsFetching(false)\n      }\n    },\n    { root: listRef.current, ...topObserverOptions }\n  )\n\n  const bottomSentinelRef = useSentinel(\n    async (onScreen, isFetching, setIsFetching) => {\n      if (!isFetching && onScreen) {\n        setIsFetching(true)\n        if (bottomCallback) {\n          await bottomCallback(listRef, bottomSentinelRef, setIsFetching)\n          setIsFetching(false)\n        }\n      }\n    },\n    { root: listRef.current, ...bottomObserverOptions }\n  )\n\n  // layout offset while did mount if necessary\n  useEffect(\n    () => {\n      if (topOffset) {\n        listRef.current.scrollTop = topOffset\n      } else if (bottomOffset) {\n        listRef.current.scrollTop =\n          listRef.current.scrollHeight -\n          listRef.current.clientHeight -\n          bottomOffset\n      }\n    },\n    [listRef, topOffset, bottomOffset]\n  )\n\n  return { listRef, topSentinelRef, bottomSentinelRef }\n}\n\nexport default ({\n  className,\n  children,\n  topOffset,\n  topCallback,\n  topObserverOptions,\n  bottomOffset,\n  bottomCallback,\n  bottomObserverOptions\n}) => {\n  const { listRef, topSentinelRef, bottomSentinelRef } = useInfiniteScroll({\n    topOffset,\n    topCallback,\n    topObserverOptions,\n    bottomOffset,\n    bottomCallback,\n    bottomObserverOptions\n  })\n\n  return children({ listRef, topSentinelRef, bottomSentinelRef })\n}\n","import React, { useState } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\n\nimport InfiniteScroll, { useInfiniteScroll } from './SentinelInfiniteScroll'\n\nconst fetchMockData = (mockData = 'bottomAddItem') => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(mockData)\n    }, 1000)\n  })\n}\n\nconst InfiniteScrollExample = () => {\n  const [list, setList] = useState([\n    'test',\n    'test',\n    'test',\n    'test',\n    'test',\n    'test',\n    'test',\n    'test',\n    'test',\n    'test'\n  ])\n\n  const topCallback = (listRef, sentinelRef, setIsFetching) => {\n    return fetchMockData('topAddItem').then(data => {\n      setList(list => [data, ...list])\n    })\n  }\n\n  const bottomCallback = (listRef, sentinelRef, setIsFetching) => {\n    return fetchMockData().then(data => {\n      setList(list => [...list, data])\n    })\n  }\n\n  const { listRef, topSentinelRef, bottomSentinelRef } = useInfiniteScroll({\n    topOffset: 40,\n    topCallback,\n    topObserverOptions: { rootMargin: '40px 0px' },\n    bottomCallback\n  })\n\n  const stopLoading = list.length > 15 && list.length < 20\n\n  return (\n    <div\n      ref={listRef}\n      style={{ height: '200px', width: '200px', overflow: 'auto' }}\n    >\n      {!stopLoading && <div ref={topSentinelRef}>Loading</div>}\n      <div className=\"list\">\n        {list.map((item, idx) => (\n          <div key={idx}>{item}</div>\n        ))}\n      </div>\n      {<div ref={bottomSentinelRef}>Loading</div>}\n    </div>\n  )\n}\n\nconst InfiniteScrollExample2 = () => {\n  const [list, setList] = useState([\n    'test',\n    'test',\n    'test',\n    'test',\n    'test',\n    'test',\n    'test',\n    'test',\n    'test',\n    'test'\n  ])\n\n  const topCallback = (listRef, sentinelRef, setIsFetching) => {\n    return fetchMockData('topAddItem').then(data => {\n      setList(list => [data, ...list])\n    })\n  }\n\n  const bottomCallback = (listRef, sentinelRef, setIsFetching) => {\n    return fetchMockData().then(data => {\n      setList(list => [...list, data])\n    })\n  }\n\n  const stopLoading = list.length > 15 && list.length < 20\n\n  return (\n    <InfiniteScroll\n      topOffset={40}\n      topCallback={topCallback}\n      bottomCallback={bottomCallback}\n      topObserverOptions={{ rootMargin: '40px 0px' }}\n    >\n      {({ listRef, topSentinelRef, bottomSentinelRef }) => (\n        <div\n          ref={listRef}\n          style={{ height: '200px', width: '200px', overflow: 'auto' }}\n        >\n          {!stopLoading && <div ref={topSentinelRef}>Loading</div>}\n          <div className=\"list\">\n            {list.map((item, idx) => (\n              <div key={idx}>{item}</div>\n            ))}\n          </div>\n          {<div ref={bottomSentinelRef}>Loading</div>}\n        </div>\n      )}\n    </InfiniteScroll>\n  )\n}\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h3>InfiniteScroll</h3>\n        <div style={{ display: 'flex' }}>\n          <InfiniteScrollExample />\n          <InfiniteScrollExample2 />\n        </div>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}